@model IEnumerable<SistemaQueueTareas.Data.Task>
@using SistemaQueueTareas.Data

@{
    ViewBag.Title = "Sistema de Gestión de Tareas";
    var taskEnProceso = ViewBag.TaskEnProceso as Task;
}

@section Styles {
    <link rel="stylesheet" href="~/Content/css/task-manager.css">
    <link rel="stylesheet" href="~/Content/css/animations.css">
    <link rel="stylesheet" href="~/Content/css/task-list.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
}

<div>
    <main>
        <div class="content-area">
            <div class="dashboard-header">
                <div class="welcome-message">
                    <h2 class="welcome-title">Sistema de Gestión de Tareas</h2>
                    <p class="welcome-subtitle">Administre sus tareas de forma eficiente y organizada</p>
                </div>
                <div class="action-buttons">
                    <a href="@Url.Action("Create", "Tasks")" class="btn btn-primary">
                        <i class="fas fa-plus"></i>
                        Nueva Tarea
                    </a>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-card total">
                    <div class="stat-icon">
                        <i class="fas fa-tasks"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count()</h3>
                        <p class="stat-label">Total Tareas</p>
                    </div>
                </div>
                <div class="stat-card completed">
                    <div class="stat-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "Finalizada")</h3>
                        <p class="stat-label">Completadas</p>
                    </div>
                </div>
                <div class="stat-card in-progress">
                    <div class="stat-icon">
                        <i class="fas fa-spinner"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "En Proceso")</h3>
                        <p class="stat-label">En Proceso</p>
                    </div>
                </div>
                <div class="stat-card failed">
                    <div class="stat-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "Fallida")</h3>
                        <p class="stat-label">Fallidas</p>
                    </div>
                </div>
                <div class="stat-card pending">
                    <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "Pendiente")</h3>
                        <p class="stat-label">Pendientes</p>
                    </div>
                </div>
                <div class="stat-card in-queue">
                    <div class="stat-icon">
                        <i class="fas fa-hourglass-start"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "En Cola")</h3>
                        <p class="stat-label">En Cola</p>
                    </div>
                </div>
                <div class="stat-card pause">
                    <div class="stat-icon">
                        <i class="fas fa-pause-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "En Pausa")</h3>
                        <p class="stat-label">En Pausa</p>
                    </div>
                </div>
            </div>

            <div class="filters-section">
                <div class="filters-header">
                    <h3 class="filters-title">
                        <i class="fas fa-filter"></i>
                        Filtros
                    </h3>
                </div>
                <div class="filters-body">
                    @using (Html.BeginForm("Index", "Tasks", FormMethod.Get, new { @class = "filters-form", id = "filters-form" }))
                    {
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="fas fa-flag"></i>
                                Prioridad
                            </label>
                            @Html.DropDownList("id_priority", ViewBag.PrioritiesFilter as SelectList, "Todas las prioridades", new { @class = "filter-select" })
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="fas fa-filter"></i>
                                Estado
                            </label>
                            @Html.DropDownList("id_state", ViewBag.StatesFilter as SelectList, "Todos los estados", new { @class = "filter-select" })
                        </div>
                        <div class="filter-group">
                            <button type="submit" class="btn btn-primary btn-filter">
                                <i class="fas fa-search"></i>
                                Filtrar
                            </button>
                        </div>
                    }
                </div>
            </div>

            <div id="active-task-container">
                @Html.Action("ActiveTaskPartial", "Tasks")
            </div>

            <div class="tasks-section" id="tasks-list-container">
                <div class="section-header">
                    <h3 class="section-title">
                        <i class="fas fa-list-check"></i>
                        Listado de Tareas
                    </h3>
                    <div class="section-actions">
                        <button id="refresh-active-task" class="btn btn-icon" title="Refrescar tarea en ejecución">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <button id="refresh-tasks" class="btn btn-icon" title="Refrescar lista de tareas">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>
                </div>

                <div id="tasks-list">
                    @Html.Action("TaskListPartial", "Tasks")
                </div>
            </div>
        </div>
    </main>
</div>

@section Scripts{
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            $('#refresh-tasks').click(function() {
                const priorityFilter = $('#id_priority').val();
                const stateFilter = $('#id_state').val();
                const currentViewMode = localStorage.getItem('tasksViewMode') || 'list';

                $.ajax({
                    url: '@Url.Action("TaskListPartial", "Tasks")',
                    type: 'GET',
                    data: {
                        id_priority: priorityFilter,
                        id_state: stateFilter,
                        viewMode: currentViewMode
                    },
                    success: function(result) {
                        $('#tasks-list').html(result);
                        // Re-apply the current view mode after refresh
                        if (currentViewMode === 'grid') {
                            $('#tasks-list').addClass('grid-view');
                        } else {
                            $('#tasks-list').removeClass('grid-view');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error al actualizar tareas:', error);
                    }
                });
            });

            $('#refresh-active-task').click(function() {
                $.ajax({
                    url: '@Url.Action("ActiveTaskPartial", "Tasks")',
                    type: 'GET',
                    success: function(result) {
                        $('#active-task-container').html(result);
                        if ($('#countdown').length) {
                            initializeTimer();
                        }
                        if ($('#dynamic-progress-container').length && $('#active-task-container').find('#dynamic-progress-bar').length) {
                            simulateRandomLoading();
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error al actualizar tarea activa:', error);
                    }
                });
            });

            function initializeTimer() {
                const startTime = new Date($('#countdown').data('start'));
                const updateTimer = () => {
                    const now = new Date();
                    const diff = now - startTime;

                    const hours = Math.floor(diff / 3600000);
                    const minutes = Math.floor((diff % 3600000) / 60000);
                    const seconds = Math.floor((diff % 60000) / 1000);

                    $('#countdown').html(`
                        ${hours.toString().padStart(2, '0')}:
                        ${minutes.toString().padStart(2, '0')}:
                        ${seconds.toString().padStart(2, '0')}
                    `);
                };
                setInterval(updateTimer, 1000);
                updateTimer();
            }

            if ($('#countdown').length) {
                initializeTimer();
            }

            function updateProgressBar(percentage) {
                const progressBar = $('#dynamic-progress-bar');
                if (progressBar.length) {
                    progressBar.css('width', percentage + '%');
                }
            }

            function simulateRandomLoading() {
                const progressBarContainer = $('#dynamic-progress-container');
                const activeTaskContainer = $('#active-task-container');

                if (progressBarContainer.length && activeTaskContainer.find('#dynamic-progress-bar').length) {
                    const randomTime = Math.random() * 5000 + 1000;
                    let progress = 0;
                    const intervalTime = 200;

                    const interval = setInterval(() => {
                        progress += (intervalTime / randomTime) * 100;
                        if (progress >= 100) {
                            progress = 100;
                            clearInterval(interval);
                            console.log('Random loading complete!');
                        }
                        updateProgressBar(progress);
                    }, intervalTime);
                }
            }
        });
    </script>
}
