@model IEnumerable<SistemaQueueTareas.Data.Task>
@using SistemaQueueTareas.Data

@{
    ViewBag.Title = "Sistema de Gestión de Tareas";
    var taskEnProceso = ViewBag.TaskEnProceso as Task;
}

@section Styles {
    <link rel="stylesheet" href="~/Content/css/task-manager.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
}

<div class="app-container">
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <div class="logo">
                <i class="fas fa-tasks"></i>
                <span>TaskManager</span>
            </div>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li class="active">
                    <a href="@Url.Action("Index", "Tasks")">
                        <i class="fas fa-home"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="@Url.Action("Create", "Tasks")">
                        <i class="fas fa-plus-circle"></i>
                        <span>Nueva Tarea</span>
                    </a>
                </li>
            </ul>
        </nav>
        <div class="sidebar-footer">
            <a href="#" class="help-link">
                <i class="fas fa-question-circle"></i>
                <span>Ayuda & Soporte</span>
            </a>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <div class="content-area">
            <!-- Dashboard Header -->
            <div class="dashboard-header">
                <div class="welcome-message">
                    <h2 class="welcome-title">Sistema de Gestión de Tareas</h2>
                    <p class="welcome-subtitle">Administre sus tareas de forma eficiente y organizada</p>
                </div>
            </div>

            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card total">
                    <div class="stat-icon">
                        <i class="fas fa-tasks"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count()</h3>
                        <p class="stat-label">Total Tareas</p>
                    </div>
                </div>
                <div class="stat-card completed">
                    <div class="stat-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "Finalizada")</h3>
                        <p class="stat-label">Completadas</p>
                    </div>
                </div>
                <div class="stat-card in-progress">
                    <div class="stat-icon">
                        <i class="fas fa-spinner"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "En Proceso")</h3>
                        <p class="stat-label">En Proceso</p>
                    </div>
                </div>
                <div class="stat-card failed">
                    <div class="stat-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "Fallida")</h3>
                        <p class="stat-label">Fallidas</p>
                    </div>
                </div>
                <div class="stat-card pending">
                    <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "Pendiente")</h3>
                        <p class="stat-label">Pendientes</p>
                    </div>
                </div>
                <div class="stat-card in-queue">
                    <div class="stat-icon">
                        <i class="fas fa-hourglass-start"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "En Cola")</h3>
                        <p class="stat-label">En Cola</p>
                    </div>
                </div>
                <div class="stat-card pause">
                    <div class="stat-icon">
                        <i class="fas fa-pause-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3 class="stat-number">@Model.Count(t => t.State.name == "En Pausa")</h3>
                        <p class="stat-label">En Pausa</p>
                    </div>
                </div>
            </div>

            <!-- Filters Section -->
            <div class="filters-section">
                <div class="filters-header">
                    <h3 class="filters-title">
                        <i class="fas fa-filter"></i>
                        Filtros
                    </h3>
                    <button type="button" class="btn btn-text" id="reset-filters">
                        <i class="fas fa-times"></i>
                        Limpiar Filtros
                    </button>
                </div>
                <div class="filters-body">
                    @using (Html.BeginForm("Index", "Tasks", FormMethod.Get, new { @class = "filters-form", id = "filters-form" }))
                    {
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="fas fa-flag"></i>
                                Prioridad
                            </label>
                            @Html.DropDownList("id_priority", ViewBag.PrioritiesFilter as SelectList, "Todas las prioridades", new
                            {
                                @class = "filter-select"
                            })
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="fas fa-info-circle"></i>
                                Estado
                            </label>
                            @* Traer el ViewBag de los estados *@
                        </div>
                        <div class="filter-group">
                            <button type="submit" class="btn btn-primary btn-filter">
                                <i class="fas fa-search"></i>
                                Filtrar
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- Active Task Container -->
            <div id="active-task-container">
                @if (taskEnProceso != null)
                {
                    @Html.Partial("_ActiveTaskPartial", taskEnProceso)
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        No hay tarea en ejecución en este momento.
                    </div>
                }
            </div>

            <!-- Tasks List Container -->
            <div class="tasks-section" id="tasks-list-container">
                <div class="section-header">
                    <h3 class="section-title">
                        <i class="fas fa-list-check"></i>
                        Listado de Tareas
                    </h3>
                    <div class="section-actions">
                        <button id="refresh-active-task" class="btn btn-icon" title="Refrescar tarea en ejecución">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <button id="refresh-tasks" class="btn btn-icon" title="Refrescar lista de tareas">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <div class="view-toggle">
                            <button class="toggle-btn active" data-view="list" title="Vista de lista">
                                <i class="fas fa-list"></i>
                            </button>
                            <button class="toggle-btn" data-view="grid" title="Vista de cuadrícula">
                                <i class="fas fa-th-large"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div id="tasks-list">
                    @Html.Partial("_TaskListPartial", Model)
                </div>
            </div>
        </div>
    </main>
</div>

@section Scripts{
    <script>
        // View Toggle
        document.querySelectorAll('.toggle-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.toggle-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');

                const view = this.dataset.view;
                const taskList = document.getElementById('tasks-list');

                if (view === 'grid') {
                    taskList.classList.add('grid-view');
                } else {
                    taskList.classList.remove('grid-view');
                }
            });
        });

        // Refresh Tasks List
        document.getElementById('refresh-tasks').addEventListener('click', function() {
            const spinner = this.querySelector('i');
            spinner.classList.add('fa-spin');

            fetch('@Url.Action("GetTaskListPartial")')
                .then(response => {
                    if (!response.ok) throw new Error('Error en la respuesta');
                    return response.text();
                })
                .then(html => {
                    document.getElementById('tasks-list').innerHTML = html;
                    showNotification('Lista de tareas actualizada', 'success');
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error al actualizar las tareas', 'error');
                })
                .finally(() => {
                    spinner.classList.remove('fa-spin');
                });
        });

        // Refresh Active Task
        document.getElementById('refresh-active-task').addEventListener('click', function() {
            const spinner = this.querySelector('i');
            spinner.classList.add('fa-spin');

            fetch('@Url.Action("GetActiveTaskPartial")')
                .then(response => {
                    if (!response.ok) throw new Error('Error en la respuesta');
                    return response.text();
                })
                .then(html => {
                    document.getElementById('active-task-container').innerHTML = html;
                    initializeCountdown();
                    showNotification('Tarea activa actualizada', 'success');
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error al actualizar la tarea activa', 'error');
                })
                .finally(() => {
                    spinner.classList.remove('fa-spin');
                });
        });

        // Reset Filters - Fixed function
        document.getElementById('reset-filters').addEventListener('click', function() {
            const prioritySelect = document.getElementById('id_priority');
            const stateSelect = document.getElementById('id_state');

            if (prioritySelect) prioritySelect.value = '';
            if (stateSelect) stateSelect.value = '';

            document.getElementById('filters-form').submit();
        });

        // Initialize Countdown
        function initializeCountdown() {
            const countdownElement = document.getElementById('countdown');
            if (!countdownElement) return;

            const startTimeStr = countdownElement.getAttribute('data-start');
            if (!startTimeStr) return;

            const startTime = new Date(startTimeStr).getTime();
            const progressBar = document.getElementById('progress-bar');

            // Estimated task duration (30 minutes by default)
            const estimatedDuration = 30 * 60 * 1000;

            function updateCountdown() {
                const now = new Date().getTime();
                const elapsed = now - startTime;
                const remaining = estimatedDuration - elapsed;

                if (remaining <= 0) {
                    countdownElement.innerHTML = '<i class="fas fa-check-circle"></i> Completado';
                    if (progressBar) progressBar.style.width = '100%';
                    return;
                }

                // Format remaining time
                const minutes = Math.floor(remaining / (1000 * 60));
                const seconds = Math.floor((remaining % (1000 * 60)) / 1000);

                countdownElement.innerHTML = `<i class="fas fa-hourglass-half"></i> ${minutes}m ${seconds}s`;

                // Update progress bar
                if (progressBar) {
                    const progressPercent = Math.min(100, (elapsed / estimatedDuration) * 100);
                    progressBar.style.width = `${progressPercent}%`;

                    if (progressPercent > 75) {
                        progressBar.classList.add('danger');
                    } else if (progressPercent > 50) {
                        progressBar.classList.add('warning');
                    }
                }
            }

            // Initial update
            updateCountdown();

            // Update every second
            setInterval(updateCountdown, 1000);
        }

        // Show notification
        function showNotification(message, type = 'info') {
            // Remove existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notification => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            });

            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <i class="fas ${type === 'error' ? 'fa-exclamation-circle' : type === 'success' ? 'fa-check-circle' : 'fa-info-circle'}"></i>
                    <span>${message}</span>
                </div>
                <button class="notification-close">
                    <i class="fas fa-times"></i>
                </button>
            `;

            document.body.appendChild(notification);

            // Show notification
            setTimeout(() => {
                notification.classList.add('show');
            }, 10);

            // Auto hide after 5 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 5000);

            // Close button
            notification.querySelector('.notification-close').addEventListener('click', () => {
                notification.classList.remove('show');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            });
        }

        // Initialize countdown on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeCountdown();

            // Add glass effect on scroll
            window.addEventListener('scroll', function() {
                const sidebar = document.querySelector('.sidebar');
                if (window.scrollY > 10) {
                    sidebar.classList.add('glass-effect');
                } else {
                    sidebar.classList.remove('glass-effect');
                }
            });
        });
    </script>
}