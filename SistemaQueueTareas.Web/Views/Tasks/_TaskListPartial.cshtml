@model IEnumerable<SistemaQueueTareas.Data.Task>

<div class="tasks-list @(ViewBag.ViewMode == "grid" ? "grid-view" : "list-view")">
    @if (Model != null && Model.Any())
    {
        foreach (var task in Model)
        {
            <div class="task-item @(ViewBag.TaskEnProceso?.id == task.id ? "active" : "")">
                <div class="task-content">
                    <div class="task-icon">
                        @switch (task.State.name)
                        {
                            case "Finalizada":
                                <i class="fas fa-check-circle text-success"></i>
                                break;
                            case "Fallida":
                                <i class="fas fa-times-circle text-danger"></i>
                                break;
                            case "En Proceso":
                                <i class="fas fa-spinner fa-spin text-warning"></i>
                                break;
                            case "En Pausa":
                                <i class="fas fa-pause-circle text-info"></i>
                                break;
                            default:
                                <i class="fas fa-tasks text-primary"></i>
                                break;
                        }
                    </div>
                    <div class="task-details">
                        <h4 class="task-title">@task.name</h4>
                        <p class="task-desc">@task.description</p>
                        <div class="task-meta">
                            <span class="badge bg-secondary">
                                <i class="fas fa-calendar-alt me-2"></i>
                                @task.fecha_creacion
                            </span>
                            <span class="badge bg-primary">
                                <i class="fas fa-flag me-2"></i>
                                @task.Priority.name
                            </span>
                            <!-- Badge de estado con colores personalizados -->
                            <span class="badge @(task.State.name switch {
                                "Finalizada" => "status-finalizada",
                                "Fallida" => "status-fallida",
                                "En Proceso" => "status-proceso",
                                "En Pausa" => "status-en-pausa",
                                _ => "status-pendiente"
                            })">
                                <i class="fas fa-tag me-2"></i>
                                @task.State.name
                            </span>
                        </div>
                    </div>
                </div>
                <div class="task-actions mt-3">
                    <a href="@Url.Action("Details", new { id = task.id })" class="btn btn-icon" title="Ver detalles">
                        <i class="fas fa-eye"></i>
                    </a>

                    @if (task.State.name == "En Pausa")
                    {
                        <a href="@Url.Action("EditTaskModal", new { id = task.id })" class="btn btn-icon" title="Editar tarea">
                            <i class="fas fa-edit"></i>
                        </a>
                    }

                    @if (task.State.name != "En Proceso")
                    {
                        <a href="@Url.Action("Delete", new { id = task.id })" class="btn btn-icon danger" title="Eliminar tarea">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    }

                    @if (task.State.name == "Fallida")
                    {
                        using (Html.BeginForm("Retry", "Tasks", new { id = task.id }, FormMethod.Post, new { @class = "d-inline" }))
                        {
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-icon warning" title="Reintentar tarea">
                                <i class="fas fa-redo"></i>
                            </button>
                        }
                    }

                    @if (task.State.name == "En Pausa")
                    {
                        using (Html.BeginForm("ExecuteTask", "Tasks", new { id = task.id }, FormMethod.Post, new { @class = "d-inline" }))
                        {
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-icon success" title="Meter en cola">
                                <i class="fas fa-play"></i>
                            </button>
                        }
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <h4>No hay tareas disponibles</h4>
            <p>No se encontraron tareas con los criterios de filtro actuales.</p>
        </div>
    }
</div>